var request = require('request');
var cheerio = require('cheerio');
var debug = require('debug')('appreports:crawler');
var mongoose = require('mongoose');
var async = require('async');

var userAgent = 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.9) Gecko/20071025 Firefox/2.0.0.9';

function parseAppDetails(body) {
  $ = cheerio.load(body);

  var details = {
    name: $('h1[itemprop="name"]').text(),
    datePublished: $('meta[itemprop="datePublished"]').attr('content'),
    softwareVersion: $('span[itemprop="softwareVersion"]').text()
  };

  return details;
}

exports.getStatus = function(url, callback) {
  request({ url: url, followRedirect: false, headers: { 'User-Agent': userAgent }}, function(err, res) {
    debug(res.statusCode, url);
    return callback(res.statusCode);
  });
}

exports.fetchAppRating = function(url, callback) {
  request({ url: url, followRedirect: false, headers: { 'User-Agent': userAgent }}, function(err, resp, body) {
    if(err) {
      return callback(err);
    }

    if(resp.statusCode != 200) {
      return callback(resp.statusCode);
    }

    $ = cheerio.load(body);

    var ratingCount = $('meta[itemprop="ratingCount"]').attr('content');
    if(!ratingCount) {
      ratingCount = '0';
    }
    ratingCount = ratingCount.replace(',', '');
    ratingCount = parseInt(ratingCount);

    var ratingValue = $('meta[itemprop="ratingValue"]').attr('content');
    if(ratingValue) {
      ratingValue = ratingValue.replace(',', '.');
      ratingValue = parseFloat(ratingValue);
    } else {
      ratingValue = 0;
    }

    return callback(null, isNaN(ratingCount) ? 0 : ratingCount, isNaN(ratingValue) ? 0 : ratingValue);
  });
}

exports.fetchAppDetails = function(url, callback) {
  request({ url: url, followRedirect: false, headers: { 'User-Agent': userAgent }}, function(err, resp, body) {
    if(err) {
      return callback(err);
    }

    var details = parseAppDetails(body);
    debug('got details', details);
    return callback(null, details);
  });
}
