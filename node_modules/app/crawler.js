var format = require('util').format;
var request = require('request');
var cheerio = require('cheerio');
var debug = require('debug')('appreports:crawler');
var mongoose = require('mongoose');
var async = require('async');
var convertDateString = require('app/date').convertDateString;

var userAgent = 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.9) Gecko/20071025 Firefox/2.0.0.9';

exports.getStatus = function(url, callback) {
  request({ url: url, followRedirect: false, headers: { 'User-Agent': userAgent }}, function(err, res) {
    debug(res.statusCode, url);
    return callback(res.statusCode);
  });
}

exports.getStoreUrl = function(storeId, callback) {
  var phoneFormat = 'http://www.windowsphone.com/s?appid=%s';
  var clientFormat = 'http://apps.microsoft.com/windows/app/%s';

  request({ url: format(phoneFormat, storeId), followRedirect: false, headers: { 'User-Agent': userAgent }}, function(err, res) {
    if(err) { return callback(err); }

    if(res.statusCode == 301 && res.headers.location.indexOf(storeId) > -1) {
      return callback(null, res.headers.location);
    }

    request({ url: format(clientFormat, storeId), followRedirect: false, headers: { 'User-Agent': userAgent }}, function(err, res) {
      if(err) { return callback(err); }

      if(res.statusCode == 301 && res.headers.location.indexOf(storeId) > -1) {
        return callback(null, 'http://apps.microsoft.com' + res.headers.location);
      }

      if(res.statusCode == 301 && res.headers.location.indexOf('ProductNotAvailable') > -1) {
        // app no longer exists.
        return callback(null, 'http://apps.microsoft.com/windows/en-us/app/' + storeId);
      }

      callback('Unable to find storeId: ' + storeId);
    });
  });
}

exports.fetchAppRating = function(url, callback) {
  request({ url: url, followRedirect: false, headers: { 'User-Agent': userAgent }}, function(err, resp, body) {
    if(err) {
      return callback(err);
    }

    if(resp.statusCode != 200) {
      return callback(resp.statusCode);
    }

    $ = cheerio.load(body);

    var ratingCount = $('meta[itemprop="ratingCount"]').attr('content');
    if(!ratingCount) {
      ratingCount = '0';
    }
    ratingCount = ratingCount.replace(',', '');
    ratingCount = parseInt(ratingCount);

    var ratingValue = $('meta[itemprop="ratingValue"]').attr('content');
    if(ratingValue) {
      ratingValue = ratingValue.replace(',', '.');
      ratingValue = parseFloat(ratingValue);
    } else {
      ratingValue = 0;
    }

    return callback(null, isNaN(ratingCount) ? 0 : ratingCount, isNaN(ratingValue) ? 0 : ratingValue);
  });
}

exports.fetchAppDetails = function(url, callback) {
  request({ url: url, followRedirect: false, headers: { 'User-Agent': userAgent }}, function(err, resp, body) {
    if(err) {
      return callback(err);
    }

    $ = cheerio.load(body);

    var datePublished = convertDateString($('meta[itemprop="datePublished"]').attr('content'), 'YYYY-MM-DD');
    var lastUpdated = convertDateString($('#releaseDate span').text(), 'MM/DD/YYYY');

    var details = {
      name: $('h1[itemprop="name"]').text(),
      datePublished: datePublished,
      lastUpdated: lastUpdated,
      softwareVersion: $('span[itemprop="softwareVersion"]').text() || null,
      description: $('[itemprop="description"]').text() || null,
      notes: $('#ReleaseNotesText').text() || null,
      status: resp.statusCode
    };

    debug('got details', details);
    return callback(null, details);
  });
}
