var mongoose = require('mongoose');
var Schema = mongoose.Schema;
var debug = require('debug')('appreports:app-link');
var async = require('async');

var AuditLog = require('models/audit-log');
var AppRating = require('models/app-rating');
var crawler = require('app/crawler');
var nowAsDate = require('app/date').nowAsDate;
var todayAsNumber = require('app/date').todayAsNumber;

var schema = new Schema({
  storeId: String,
  region: String,
  name: String,
  platform: String,
  bitly: String,
  primaryUrl: String,
  url: String,
  status: String,
  processedAt: Date,
  baseline: Number,
  reviewOnly: Boolean
});

schema.methods.addAudit = function(auditData, done) {
  AuditLog.addLog({
    storeId: this.storeId,
    data: auditData
  }, done);
}

schema.statics.processLinks = function(options, done, progress) {
  if(typeof options === 'function') {
    done = options;
    options = {};
  }

  if(!progress) {
    progress = function(progress) { /* do nothing */ };
  }

  var query = { status: '200' };
  if(options.storeId) {
    query.storeId = options.storeId;
  }

  debug('starting process');
  this.find(query).sort({ processedAt: 1 }).limit(options.limit || 0).exec(function(err, AppLinks) {
    var count = 0;
    var max = AppLinks.length;
    debug('processing urls', AppLinks.length);
    var totalNewReviews = 0;
    var max = AppLinks.length;
    var current = 0;
    async.eachLimit(AppLinks, 20, function(AppLink, next) {
      crawler.fetchAppRating(AppLink.url, function(err, ratings, ratingValue) {
        AppLink.processedAt = nowAsDate();

        if(err) {
          debug('problem fetching rating', err);
          AppLink.status = err;
          AppLink.save();
          return next();
        }

        AppLink.save();
        debug('processing', AppLink.url);

        var data = {
          storeId: AppLink.storeId,
          date: todayAsNumber(),
          region: AppLink.region
        };
        count++;
        (function(data, count, next) {
          AppRating.findOne(data, data, { upsert: true }, function(err, doc) {
            if(!doc) {
              doc = new AppRating(data);
            }

            doc.primaryUrl = AppLink.primaryUrl;
            if(doc.ratingCount != ratings) {
              var audit = {
                region: doc.region,
                oldRatingCount: doc.ratingCount,
                newRatingCount: ratings
              };

              doc.addAudit(audit);
              totalNewReviews += ratings - doc.ratingCount || 0;
            }
            doc.ratingCount = ratings;
            doc.ratingAverage = ratingValue;
            doc.ratingTotal = ratings * ratingValue;
            doc.name = AppLink.name;
            doc.platform = AppLink.platform;
            doc.reviewOnly = AppLink.reviewOnly;
            doc.url = AppLink.url;
            doc.bitly = AppLink.bitly;
            doc.baseline = AppLink.baseline;

            debug(doc.region, ratings, ratingValue);
            doc.save();
            current++;
            progress(Math.floor((current / max) * 100));
            return next();
          });
        })(data, count, next);
      });
    }, function() {
      done(totalNewReviews);
    });
  });
}


module.exports = mongoose.model('Link', schema);
